services:
  api:
    build: 
      context: .
      dockerfile: Dockerfile.dev
      args:
        - INSTALL_DEV=true
    ports:
      - "8000:8000" # Expose API to the host machine
    volumes:
      - .:/app
      - logo_store:/app/logo_store
      - map_store:/app/map_store
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ALGORITHM=${JWT_ALGORITHM}
      - API_VERSION=${API_VERSION}
      - DB_ECHO=${DB_ECHO:-true}
      - STEAM_API_KEY=${STEAM_API_KEY}
      - FRONTEND_URL=${FRONTEND_URL}
    
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - backend
      - frontend
    restart: unless-stopped

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    expose:
      - "5432" # Expose only to other containers in the backend network
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    expose:
      - "6379" # Expose only to other containers in the backend network
    networks:
      - backend
    restart: unless-stopped

volumes:
  postgres_data:
  logo_store:
  map_store:

networks:
  backend:
    internal: true # Only accessible to containers in this network
  frontend:
    # No 'internal' setting so API is exposed to the host