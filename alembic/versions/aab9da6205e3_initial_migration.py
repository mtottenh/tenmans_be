"""Initial migration

Revision ID: aab9da6205e3
Revises: 
Create Date: 2025-01-12 16:07:48.969658

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'aab9da6205e3'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('maps',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('img', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('permissions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('players',
    sa.Column('uid', sa.UUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('steam_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('auth_type', sa.Enum('STEAM', 'EMAIL', name='authtype'), nullable=False),
    sa.Column('password_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('current_elo', sa.Integer(), nullable=True),
    sa.Column('highest_elo', sa.Integer(), nullable=True),
    sa.Column('verification_status', sa.Enum('PENDING', 'VERIFIED', 'REJECTED', name='verificationstatus'), nullable=False),
    sa.Column('verified_by', sa.UUID(), nullable=True),
    sa.Column('verification_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('verification_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['verified_by'], ['players.uid'], ),
    sa.PrimaryKeyConstraint('uid'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('steam_id')
    )
    op.create_table('roles',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('seasons',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('state', sa.Enum('NOT_STARTED', 'IN_PROGRESS', 'COMPLETED', name='seasonstate'), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('teams',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('logo', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('action_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('entity_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('entity_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('actor_id', sa.UUID(), nullable=True),
    sa.Column('details', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['actor_id'], ['players.uid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('bans',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('player_uid', sa.UUID(), nullable=True),
    sa.Column('team_id', sa.UUID(), nullable=True),
    sa.Column('scope', sa.Enum('MATCH', 'TOURNAMENT', 'SEASON', 'PERMANENT', name='banscope'), nullable=False),
    sa.Column('scope_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('reason', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('evidence', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'EXPIRED', 'APPEALED', 'REVOKED', name='banstatus'), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('issued_by', sa.UUID(), nullable=True),
    sa.Column('revoked_by', sa.UUID(), nullable=True),
    sa.Column('revoke_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['issued_by'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['player_uid'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['revoked_by'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('player_roles',
    sa.Column('player_uid', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('scope_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('scope_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['player_uid'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('player_uid', 'role_id')
    )
    op.create_table('pugs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('CREATING', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', name='pugstatus'), nullable=True),
    sa.Column('match_format', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('max_players_per_team', sa.Integer(), nullable=False),
    sa.Column('require_full_teams', sa.Boolean(), nullable=False),
    sa.Column('map_pool', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['players.uid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('role_permissions',
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('permission_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('role_id', 'permission_id')
    )
    op.create_table('rosters',
    sa.Column('team_id', sa.UUID(), nullable=False),
    sa.Column('player_uid', sa.UUID(), nullable=False),
    sa.Column('season_id', sa.UUID(), nullable=False),
    sa.Column('pending', sa.Boolean(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['player_uid'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['season_id'], ['seasons.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('team_id', 'player_uid', 'season_id')
    )
    op.create_table('team_captains',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=True),
    sa.Column('player_uid', sa.UUID(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['player_uid'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team_join_requests',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('player_uid', sa.UUID(), nullable=True),
    sa.Column('team_id', sa.UUID(), nullable=True),
    sa.Column('season_id', sa.UUID(), nullable=True),
    sa.Column('message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'CANCELLED', 'EXPIRED', name='joinrequeststatus'), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('responded_at', sa.DateTime(), nullable=True),
    sa.Column('response_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('responded_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['player_uid'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['responded_by'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['season_id'], ['seasons.id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tournaments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('season_id', sa.UUID(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sa.Enum('REGULAR', 'KNOCKOUT', 'PUG', name='tournamenttype'), nullable=True),
    sa.Column('state', sa.Enum('NOT_STARTED', 'REGISTRATION_OPEN', 'REGISTRATION_CLOSED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', name='tournamentstate'), nullable=True),
    sa.Column('min_teams', sa.Integer(), nullable=False),
    sa.Column('max_teams', sa.Integer(), nullable=False),
    sa.Column('max_team_size', sa.Integer(), nullable=False),
    sa.Column('min_team_size', sa.Integer(), nullable=False),
    sa.Column('registration_start', sa.DateTime(), nullable=False),
    sa.Column('registration_end', sa.DateTime(), nullable=False),
    sa.Column('late_registration_end', sa.DateTime(), nullable=True),
    sa.Column('allow_late_registration', sa.Boolean(), nullable=False),
    sa.Column('format_config', sa.JSON(), nullable=True),
    sa.Column('seeding_config', sa.JSON(), nullable=True),
    sa.Column('map_pool', sa.JSON(), nullable=True),
    sa.Column('scheduled_start_date', sa.DateTime(), nullable=False),
    sa.Column('scheduled_end_date', sa.DateTime(), nullable=False),
    sa.Column('actual_start_date', sa.DateTime(), nullable=True),
    sa.Column('actual_end_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['season_id'], ['seasons.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('verification_requests',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('player_uid', sa.UUID(), nullable=True),
    sa.Column('admin_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('submitted_evidence', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'VERIFIED', 'REJECTED', name='verificationstatus'), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['player_uid'], ['players.uid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pug_map_results',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('pug_id', sa.UUID(), nullable=True),
    sa.Column('map_number', sa.Integer(), nullable=False),
    sa.Column('map_id', sa.UUID(), nullable=True),
    sa.Column('team_1_score', sa.Integer(), nullable=False),
    sa.Column('team_2_score', sa.Integer(), nullable=False),
    sa.Column('team_1_side_first', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('demo_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['map_id'], ['maps.id'], ),
    sa.ForeignKeyConstraint(['pug_id'], ['pugs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pug_players',
    sa.Column('pug_id', sa.UUID(), nullable=False),
    sa.Column('player_uid', sa.UUID(), nullable=False),
    sa.Column('team_number', sa.Integer(), nullable=True),
    sa.Column('joined_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['player_uid'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['pug_id'], ['pugs.id'], ),
    sa.PrimaryKeyConstraint('pug_id', 'player_uid')
    )
    op.create_table('pug_teams',
    sa.Column('pug_id', sa.UUID(), nullable=False),
    sa.Column('team_number', sa.Integer(), nullable=False),
    sa.Column('team_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('captain_id', sa.UUID(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['captain_id'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['pug_id'], ['pugs.id'], ),
    sa.PrimaryKeyConstraint('pug_id', 'team_number')
    )
    op.create_table('rounds',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tournament_id', sa.UUID(), nullable=True),
    sa.Column('round_number', sa.Integer(), nullable=False),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('best_of', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=False),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('substitute_availability',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('player_uid', sa.UUID(), nullable=True),
    sa.Column('tournament_id', sa.UUID(), nullable=True),
    sa.Column('season_id', sa.UUID(), nullable=True),
    sa.Column('is_available', sa.Boolean(), nullable=False),
    sa.Column('availability_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('last_substitute_date', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['player_uid'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['season_id'], ['seasons.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tournament_maps',
    sa.Column('tournament_id', sa.UUID(), nullable=False),
    sa.Column('map_id', sa.UUID(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['map_id'], ['maps.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], ),
    sa.PrimaryKeyConstraint('tournament_id', 'map_id')
    )
    op.create_table('tournament_registrations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tournament_id', sa.UUID(), nullable=True),
    sa.Column('team_id', sa.UUID(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'APPROVED', 'REJECTED', 'WITHDRAWN', 'DISQUALIFIED', name='registrationstatus'), nullable=True),
    sa.Column('requested_by', sa.UUID(), nullable=True),
    sa.Column('requested_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('reviewed_by', sa.UUID(), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(), nullable=True),
    sa.Column('review_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('withdrawn_by', sa.UUID(), nullable=True),
    sa.Column('withdrawn_at', sa.DateTime(), nullable=True),
    sa.Column('withdrawal_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('seed', sa.Integer(), nullable=True),
    sa.Column('group', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('final_position', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['requested_by'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['reviewed_by'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], ),
    sa.ForeignKeyConstraint(['withdrawn_by'], ['players.uid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('fixtures',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('tournament_id', sa.UUID(), nullable=True),
    sa.Column('round_id', sa.UUID(), nullable=True),
    sa.Column('team_1', sa.UUID(), nullable=True),
    sa.Column('team_2', sa.UUID(), nullable=True),
    sa.Column('match_format', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('scheduled_at', sa.DateTime(), nullable=False),
    sa.Column('rescheduled_from', sa.DateTime(), nullable=True),
    sa.Column('rescheduled_by', sa.UUID(), nullable=True),
    sa.Column('reschedule_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('status', sa.Enum('SCHEDULED', 'IN_PROGRESS', 'COMPLETED', 'CANCELLED', 'FORFEITED', name='fixturestatus'), nullable=True),
    sa.Column('forfeit_winner', sa.UUID(), nullable=True),
    sa.Column('forfeit_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('admin_notes', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['forfeit_winner'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['rescheduled_by'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['round_id'], ['rounds.id'], ),
    sa.ForeignKeyConstraint(['team_1'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['team_2'], ['teams.id'], ),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournaments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('match_players',
    sa.Column('fixture_id', sa.UUID(), nullable=False),
    sa.Column('player_uid', sa.UUID(), nullable=False),
    sa.Column('team_id', sa.UUID(), nullable=True),
    sa.Column('is_substitute', sa.Boolean(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['fixture_id'], ['fixtures.id'], ),
    sa.ForeignKeyConstraint(['player_uid'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ),
    sa.PrimaryKeyConstraint('fixture_id', 'player_uid')
    )
    op.create_table('results',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('fixture_id', sa.UUID(), nullable=True),
    sa.Column('map_id', sa.UUID(), nullable=True),
    sa.Column('map_number', sa.Integer(), nullable=False),
    sa.Column('team_1_score', sa.Integer(), nullable=False),
    sa.Column('team_2_score', sa.Integer(), nullable=False),
    sa.Column('team_1_side_first', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('submitted_by', sa.UUID(), nullable=True),
    sa.Column('confirmed_by', sa.UUID(), nullable=True),
    sa.Column('confirmation_status', sa.Enum('PENDING', 'CONFIRMED', 'DISPUTED', name='confirmationstatus'), nullable=True),
    sa.Column('admin_override', sa.Boolean(), nullable=False),
    sa.Column('admin_override_by', sa.UUID(), nullable=True),
    sa.Column('admin_override_reason', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('demo_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('screenshot_urls', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=True),
    sa.ForeignKeyConstraint(['admin_override_by'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['confirmed_by'], ['players.uid'], ),
    sa.ForeignKeyConstraint(['fixture_id'], ['fixtures.id'], ),
    sa.ForeignKeyConstraint(['map_id'], ['maps.id'], ),
    sa.ForeignKeyConstraint(['submitted_by'], ['players.uid'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('results')
    op.drop_table('match_players')
    op.drop_table('fixtures')
    op.drop_table('tournament_registrations')
    op.drop_table('tournament_maps')
    op.drop_table('substitute_availability')
    op.drop_table('rounds')
    op.drop_table('pug_teams')
    op.drop_table('pug_players')
    op.drop_table('pug_map_results')
    op.drop_table('verification_requests')
    op.drop_table('tournaments')
    op.drop_table('team_join_requests')
    op.drop_table('team_captains')
    op.drop_table('rosters')
    op.drop_table('role_permissions')
    op.drop_table('pugs')
    op.drop_table('player_roles')
    op.drop_table('bans')
    op.drop_table('audit_logs')
    op.drop_table('teams')
    op.drop_table('seasons')
    op.drop_table('roles')
    op.drop_table('players')
    op.drop_table('permissions')
    op.drop_table('maps')
    # ### end Alembic commands ###
